@page "/manageuser/{userid}"

@attribute [Authorize(Policy = "Admin")]

@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager
<h3>Capaian Pengguna</h3>
<br />
@if (viewModel != null)
{
    <EditForm Model="viewModel" OnValidSubmit="SaveUser">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="email">Emel</label>
            <input id="email"
                   type="text"
                   class="form-control"
                   readonly
                   value="@viewModel.Email" />
        </div>
        <br />
        <div class="form-group">
            <label for="dp">Department</label>
            <select @bind="@viewModel.Department"
                    class="form-control">
                <option value="Administration">Admin</option>
                <option value="HRDepartment">Human Resource Department</option>
            </select>
        </div>
        <br />
        <button type="submit"
                class="btn btn-primary">
            Save
        </button>
        <button type="button"
                class="btn btn-light"
                @onclick="Cancel">
            Cancel
        </button>
    </EditForm>
}
@code {
    [Parameter]
    public string? UserId { get; set; }

    private IdentityUser? user;

    private Claim? departmentClaim;

    private bool userHadDepartment = true;

    private ManageUserViewModel? viewModel;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        user = UserManager.Users.First(x => x.Id == this.UserId);
        var claims = await UserManager.GetClaimsAsync(user);
        departmentClaim = claims.FirstOrDefault(x => x.Type == "Department");

        if (departmentClaim == null)
        {
            userHadDepartment = false;
            departmentClaim = new Claim("Department", string.Empty);
        }

        viewModel = new ManageUserViewModel
        {
            Email = user.Email,
            Department = departmentClaim.Value
        };
    }

    public class ManageUserViewModel
    {
        public string? Email { get; set; }
        [Required]
        public string? Department { get; set; }

    }

    private async Task SaveUser()
    {
        if (viewModel != null && viewModel.Department != null)
        {
            if (userHadDepartment)
                await UserManager.ReplaceClaimAsync(user, departmentClaim, new Claim("Department", viewModel.Department));
            else
                await UserManager.AddClaimAsync(user, new Claim("Department", viewModel.Department));
        }

        NavigationManager.NavigateTo(NavigationManager.BaseUri + "manageusers");

    }
    private void Cancel()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "manageusers");
    }

}
