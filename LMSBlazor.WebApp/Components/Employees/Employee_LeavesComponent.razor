<div class="card">
    <div class="card-body">
        <SearchAndDisplayLeavesComponent OnLeaveSelected="OnLeaveSelected" OnInitialCount="OnInitialCount"></SearchAndDisplayLeavesComponent>
        @if (this.Employee.Employee_Leaves != null && this.Employee.Employee_Leaves.Count > 0)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Perihal</th>
                        <th>Jumlah Cuti Berbaki</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var emp_lv in this.Employee.Employee_Leaves)
                    {
                        <tr>
                            <td>
                                @emp_lv.Leave?.LeaveName
                            </td>
                            <td>
                                <input class="form-control" min="0"
                                       step="0.5" 
                                       @onfocusout="@IncrementCount" 
                                       type="number" 
                                       @bind-value="@emp_lv.DaysLeft">
                            </td>
                            <td>
                                <button type="button"
                                        class="btn btn-light"
                                        @onclick="@(() => RemoveLeave(emp_lv))">
                                    Hapus
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <div class="form-group">
            <label class="form-label" for="totalDays">Jumlah Cuti Berbaki : @currentCount</label>
            
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int Amount { get; set; }
    [Parameter] public EventCallback<double> OnAmountChanged { get; set; }

    private double currentCount { get; set; }

    [Parameter]
    public Employee Employee { get; set; } = new Employee();

    protected override void OnInitialized()
    {
        currentCount = Employee.TotalLeaveDays;
    }


    async Task IncrementCount()
    {
        currentCount = 0;
        foreach (var emp_lv in Employee.Employee_Leaves)
        {
            currentCount = currentCount + emp_lv.DaysLeft;
        }


        if (OnAmountChanged.HasDelegate)
        {
            await OnAmountChanged.InvokeAsync(currentCount);
        }
    }

    private async void RemoveLeave(Employee_Leave employee_Leave)
    {
        this.Employee.Employee_Leaves.Remove(employee_Leave);
        await IncrementCount();

    }

    private void OnLeaveSelected(Leave leave)
    {
        this.Employee.AddLeave(leave);
    }

    private async Task OnInitialCount(double days)
    {
        currentCount = currentCount + days;
        await IncrementCount();
    }


}

